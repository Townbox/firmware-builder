name: ImmortalWrt Firmware Builder

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Source branch"
        required: true
        default: "master"
      version:
        description: "Source version"
        required: true
        default: "snapshot"

env:
  BUILDBOT_BRANCH: ${{ github.event.inputs.branch }}
  BUILDBOT_VERSION: ${{ github.event.inputs.version }}

jobs:
  generate_targets:
    name: Generate target list
    runs-on: ubuntu-latest
    outputs:
      targets: ${{ steps.list_targets.outputs.targets }}

    steps:
      - name: Checkout ImmortalWrt source tree
        uses: actions/checkout@v3
        with:
          repository: "immortalwrt/immortalwrt"
          ref: ${{ env.BUILDBOT_BRANCH }}
          fetch-depth: 0

      - name: Checkout tags
        run: |
          case "$BUILDBOT_VERSION" in \
          "snapshot"|*-SNAPSHOT) ;; \
          *) git reset --hard v"${BUILDBOT_VERSION#openwrt-}" ;; \
          esac

      - name: Generate target list
        id: list_targets
        run: |
          # FIXME: realtek is broken due to libnml.
          for TARGET in $(perl ./scripts/dump-target-info.pl targets 2>/dev/null | awk '{ print $1 }'); do \
            grep -q "realtek" <<< "$TARGET" || TARGET_LIST="${TARGET_LIST:+$TARGET_LIST,}\"${TARGET}\""; \
          done
          JSON_LIST="{\"runner\": [\"ubuntu-latest\"],\"targets\":[$TARGET_LIST]}"
          echo "$JSON_LIST" | jq .
          echo "::set-output name=targets::$JSON_LIST"

  build:
    name: Build firmware for ${{ matrix.targets }}
    needs: generate_targets
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix: ${{fromJson(needs.generate_targets.outputs.targets)}}
      fail-fast: false
      max-parallel: 10

    steps:
      - name: Free disk space
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E swapoff -a
          sudo -E rm -f /swapfile
          sudo -E docker image prune -a -f
          sudo -E snap set system refresh.retain=2
          sudo -E apt -y purge azure-cli dotnet* firefox ghc* google* hhvm llvm* mono* mysql* openjdk* php* zulu* powershell* msodbc* android*
          sudo -E apt -y autoremove --purge
          sudo -E apt clean
          sudo -E rm -rf /usr/share/dotnet /usr/local/lib/android/sdk /etc/mysql /etc/php

      - name: Install dependencies
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt -y update
          sudo -E apt -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 flex uglifyjs gcc g++ gcc-multilib g++-multilib p7zip-full msmtp libssl-dev texinfo libreadline-dev libglib2.0-dev xmlto qemu-utils libelf-dev autoconf automake libtool autopoint curl wget python3 python3-pip python3-ply device-tree-compiler scons gperf sshpass rsync
          sudo -E pip3 install -U python-telegram-bot
          sudo -E apt -y clean

      - name: Checkout firmware-builder repo
        uses: actions/checkout@v3

      - name: Checkout ImmortalWrt source tree
        uses: actions/checkout@v3
        with:
          repository: immortalwrt/immortalwrt
          ref: ${{ env.BUILDBOT_BRANCH }}
          fetch-depth: 0
          path: 'immortalwrt'

      - name: Set target info
        run: |
          BUILDBOT_TARGET="$(echo ${{ matrix.targets }} | cut -d "/" -f 1)"
          BUILDBOT_SUBTARGET="$(echo ${{ matrix.targets }} | cut -d "/" -f 2)"
          echo "BUILDBOT_TARGET=$BUILDBOT_TARGET" | tee -a "$GITHUB_ENV"
          echo "BUILDBOT_SUBTARGET=$BUILDBOT_SUBTARGET" | tee -a "$GITHUB_ENV"

      - name: Pull source tree
        run: |
          sudo -E mkdir -p "/immortalwrt"
          sudo -E chown "$USER":"$GROUPS" "/immortalwrt"

          mv -f "immortalwrt" "/immortalwrt/immortalwrt"
          pushd "/immortalwrt/immortalwrt"

          case "$BUILDBOT_VERSION" in \
          "snapshot"|*-SNAPSHOT) ;; \
          *) git reset --hard v"${BUILDBOT_VERSION#openwrt-}" ;; \
          esac

          ./scripts/feeds update -a
          ./scripts/feeds install -a

          popd

      - name: Set build key
        working-directory: '/immortalwrt/immortalwrt'
        run: |
          case "$BUILDBOT_BRANCH" in \
          "master") \
            echo -e "${{ secrets.SNAPSHOT_SECKEY }}" > "key-build"; \
            echo -e "${{ secrets.SNAPSHOT_PUBKEY }}" > "key-build.pub"; ;; \
          "openwrt-21.02") \
            echo -e "${{ secrets.OP2102_SECKEY }}" > "key-build"; \
            echo -e "${{ secrets.OP2102_PUBKEY }}" > "key-build.pub"; ;; \
          "openwrt-18.06"|"openwrt-18.06-k5.4") \
            echo -e "${{ secrets.OP1806_SECKEY }}" > "key-build"; \
            echo -e "${{ secrets.OP1806_PUBKEY }}" > "key-build.pub"; ;; \
          esac

      - name: Patch buildroot
        working-directory: '/immortalwrt/immortalwrt'
        run: |
          [ "$(ls -A "$GITHUB_WORKSPACE/patches/generic"/*.patch 2>"/dev/null" | wc -l)" -eq "0" ] || \
            for i in "$GITHUB_WORKSPACE/patches/generic"/*.patch; do patch -p1 < "$i"; done
          [ "$(ls -A "$GITHUB_WORKSPACE/patches/$BUILDBOT_BRANCH"/*.patch 2>"/dev/null" |  wc -l)" -eq "0" ] || \
            for i in "$GITHUB_WORKSPACE/patches/$BUILDBOT_BRANCH"/*.patch; do patch -p1 < "$i"; done

      - name: Config buildroot
        working-directory: '/immortalwrt/immortalwrt'
        run: |
          echo -e "CONFIG_TARGET_${BUILDBOT_TARGET}=y" | tee ".config"
          echo -e "CONFIG_TARGET_${BUILDBOT_TARGET}_${BUILDBOT_SUBTARGET}=y" | tee -a ".config"
          echo -e "CONFIG_TARGET_MULTI_PROFILE=y" | tee -a ".config"
          echo -e "CONFIG_ALL_KMODS=y" | tee -a ".config"
          echo -e "CONFIG_ALL_NONSHARED=y" | tee -a ".config"
          echo -e "CONFIG_DEVEL=y" | tee -a ".config"
          echo -e "CONFIG_TARGET_PER_DEVICE_ROOTFS=y" | tee -a ".config"
          echo -e "CONFIG_AUTOREMOVE=y" | tee -a ".config"
          echo -e "CONFIG_BUILDBOT=y" | tee -a ".config"
          echo -e "CONFIG_BUILD_LOG=y" | tee -a ".config"
          echo -e "CONFIG_COLLECT_KERNEL_DEBUG=y" | tee -a ".config"
          echo -e "CONFIG_IB=y" | tee -a ".config"
          echo -e "CONFIG_MAKE_TOOLCHAIN=y" | tee -a ".config"
          echo -e "CONFIG_SDK=y" | tee -a ".config"
          echo -e "CONFIG_REPRODUCIBLE_DEBUG_INFO=y" | tee -a ".config"
          echo -e "CONFIG_TARGET_ALL_PROFILES=y" | tee -a ".config"

          if [ "$BUILDBOT_VERSION" != "snapshot" ]; then \
            echo -e "CONFIG_IMAGEOPT=y" | tee -a ".config" ; \
            echo -e "CONFIG_VERSIONOPT=y" | tee -a ".config" ; \
          fi

          make defconfig

      - name: Build tools
        working-directory: '/immortalwrt/immortalwrt'
        run: |
          make tools/install -j$(nproc) || make tools/install V=s

      - name: Build toolchain
        working-directory: '/immortalwrt/immortalwrt'
        run: |
          make toolchain/install -j$(nproc) || make toolchain/install V=s

      - name: Build target
        working-directory: '/immortalwrt/immortalwrt'
        run: |
          make target/compile -j$(nproc) IGNORE_ERRORS=1 || \
            make target/compile IGNORE_ERRORS=1 V=s

      - name: Build packages
        working-directory: '/immortalwrt/immortalwrt'
        run: |
          make package/compile -j$(nproc) IGNORE_ERRORS=1 || \
            make package/compile IGNORE_ERRORS=1 V=s

          make package/install -j$(nproc) || make package/install V=s

          make package/index V=s

      - name: Build firmware
        working-directory: '/immortalwrt/immortalwrt'
        run: |
          make target/install -j$(nproc) || make target/install V=s

      - name: Generate buildinfo
        working-directory: '/immortalwrt/immortalwrt'
        run: |
          make buildinfo V=s

      - name: Generate JSON overview
        working-directory: '/immortalwrt/immortalwrt'
        run: |
          make json_overview_image_info V=s

      - name: Generate HASH
        working-directory: '/immortalwrt/immortalwrt'
        run: |
          make checksum V=s

      - name: Generate kmods feed
        working-directory: '/immortalwrt/immortalwrt'
        run: |
          "$GITHUB_WORKSPACE"/scripts/create_kmods

      - name: Print faillogs
        working-directory: '/immortalwrt/immortalwrt'
        run: |
          [ ! -e "./logs/error.txt" ] || cat "./logs/error.txt"
          [ ! -e "./logs/package/error.txt" ] || cat "./logs/package/error.txt"

      - name: Upload files
        working-directory: '/immortalwrt/immortalwrt'
        env:
          RSYNC_ADDR: ${{ secrets.RSYNC_ADDR }}
          RSYNC_USER: ${{ secrets.RSYNC_USER }}
          RSYNC_PASS: ${{ secrets.RSYNC_PASS }}
        run: |
          export TOPDIR="$PWD"
          BIN_DIR="$(make --no-print-directory -C target/linux val.BIN_DIR)"
          KMOD_DIR="$(make --no-print-directory -C target/linux val.LINUX_VERSION val.LINUX_RELEASE val.LINUX_VERMAGIC | tr '\n' '-' | head -c -1)"

          UL_TARGET="$(awk -F '/' '{print $(NF-1)}' <<< "$BIN_DIR")"
          UL_SUBTARGET="$(awk -F '/' '{print $NF}' <<< "$BIN_DIR")"

          sshpass -p "$RSYNC_PASS" rsync -ahv --delete --exclude "kmods" "$BIN_DIR" "rsync://${RSYNC_USER}@${RSYNC_ADDR}/${BUILDBOT_VERSION}-targets/$UL_TARGET/"
          sshpass -p "$RSYNC_PASS" rsync -ahv --delete "$BIN_DIR/kmods/$KMOD_DIR" "rsync://${RSYNC_USER}@${RSYNC_ADDR}/${BUILDBOT_VERSION}-targets/$UL_TARGET/$UL_SUBTARGET/kmods/"

          sshpass -p "$RSYNC_PASS" rsync -lhprvD --exclude "*cache*" "$TOPDIR/dl/" "rsync://${RSYNC_USER}@${RSYNC_ADDR}/dl/"

      - name: Update Docker images
        working-directory: '/immortalwrt/immortalwrt'
        env:
          FWSELECTOR_REFRESH_URL: ${{ secrets.FWSELECTOR_REFRESH_URL }}
          FWSELECTOR_REFRESH_TOKEN: ${{ secrets.FWSELECTOR_REFRESH_TOKEN }}
          GH_BOT_PAT: ${{ secrets.GH_BOT_PAT }}
          GH_DOCKER_REPO: 'immortalwrt/docker'
          GH_DOCKER_REPO_BRANCH: 'master'
        run: |
          "$GITHUB_WORKSPACE"/scripts/update_docker

      - name: Report status to Telegram group
        if: ${{ always() }}
        working-directory: '/immortalwrt/immortalwrt'
        env:
          GH_BOT_PAT: ${{ secrets.GH_BOT_PAT }}
          TG_CHAT_ID: ${{ secrets.TG_CHAT_ID }}
          TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
          JOB_BUILD_STATUS: ${{ job.status }}
        run: |
          "$GITHUB_WORKSPACE"/scripts/report_status

      - name: Cleanup buildroot
        if: ${{ always() }}
        working-directory: '/immortalwrt/immortalwrt'
        run: |
          make distclean V=s

          cd ../
          mv -f "immortalwrt" "$GITHUB_WORKSPACE/immortalwrt"
