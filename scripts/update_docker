#!/usr/bin/env python3
#-*-coding:utf-8-*-
# SPDX-License-Identifier: GPL-3.0-only
#
# Copyright (C) 2021 ImmortalWrt.org

import json, os, requests

os.environ['TOPDIR'] = os.getenv('PWD')

ib_name = 'Build ImageBuilder images (trigger)'
sdk_name = 'Build SDK images (trigger)'
rootfs_name = 'Build rootfs images (trigger)'
rootfs_target = [ 'armvirt-32', 'armvirt-64', 'malta-be', 'x86-generic', 'x86-geode', 'x86-64' ]

fwselector_refresh_url = os.getenv('FWSELECTOR_REFRESH_URL')
fwselector_refresh_token = os.getenv('FWSELECTOR_REFRESH_TOKEN')

gh_repo = os.getenv('GH_DOCKER_REPO')
gh_repo_branch = os.getenv('GH_DOCKER_REPO_BRANCH')
gh_token = os.getenv('GH_BOT_PAT')

branch = os.getenv('BUILDBOT_BRANCH')
version = os.getenv('BUILDBOT_VERSION')

target = os.getenv('BUILDBOT_TARGET') + '-' + os.getenv('BUILDBOT_SUBTARGET')
arch = os.popen('make --no-print-directory -C target/linux val.ARCH_PACKAGES').read().strip()

try:
	ret = requests.get(fwselector_refresh_url + fwselector_refresh_token)
	if not ret.ok:
		print('Failed to refresh ImmortalWrt Firmware Selector.')
		exit(1)
except:
	print('Failed to refresh ImmortalWrt Firmware Selector.')
	exit(1)

try:
	workflow_info = requests.get(f'https://api.github.com/repos/{gh_repo}/actions/workflows',
		headers={ 'Accept': 'application/vnd.github.v3+json', 'Authorization': f'Bearer {gh_token}' })
	workflow_info.encoding='utf-8'
	workflow_info = json.loads(workflow_info.text)

	ib_id, sdk_id, rootfs_id = 0, 0, 0
	if workflow_info.get('total_count') and (workflow_info.get('total_count') > 0):
		for workflow in workflow_info['workflows']:
			if workflow['name'] == ib_name:
				ib_id = workflow['id']
			elif workflow['name'] == sdk_name:
				sdk_id = workflow['id']
			elif workflow['name'] == rootfs_name:
				rootfs_id = workflow['id']

	if not (ib_id and sdk_id and rootfs_id):
		print('Failed to get workflow ID.')
		exit(1)

	if target not in rootfs_target:
		rootfs_id = 0

	post_data=json.dumps({'inputs': { 'branch': branch, 'version': version, 'target': target, 'arch': arch },
		'ref': gh_repo_branch})

	for wid in [ib_id, sdk_id, rootfs_id]:
		if wid:
			requests.post(f'https://api.github.com/repos/{gh_repo}/actions/workflows/{wid}/dispatches',
				headers={ 'Authorization': f'Bearer {gh_token}' }, data=post_data)
except:
	print('Failed to get workflow info.')
	exit(1)
